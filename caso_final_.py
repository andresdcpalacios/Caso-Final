# -*- coding: utf-8 -*-
"""Caso Final .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xTse0cbJ0uTNpFRLmC_udE64wMC3hGLn

El número de Sheldon: En la serie “Big Bang Theory” se conjeturó que el número 23 posee unas características únicas que no posee ningún otro número (link a la conjetura original). En 2019 Pomerance y Spicer demostraron que solo el 73 cumple las condiciones de la Conjetura de Sheldon (link a la desmostración). El ejercicio consistirá en comprobar que en los números entre el 1 y el 1 000 000 solo el 73 cumple la conjetura de Sheldon. Un número de Sheldon debe cumplir 3 propiedades:

1.   Función para verificar que un número es primo
"""

def es_primo(num):
	    return sp.isprime(num)

"""	# Función para obtener el producto de los dígitos de un número"""

def producto_digitos(num):
	    producto = 1
	    for digito in str(num):
	        producto *= int(digito)
	    return producto

"""	# Función para obtener el "número espejo" invirtiendo los dígitos"""

def numero_espejo(num):
	    return int(str(num)[::-1])

"""Se generan  los númeors primos hasta 1000000 y se almacenan en una lista"""

!pip install sympy
import sympy as sp # Import the sympy library and alias it as 'sp'

primos = list(sp.primerange(1, 1000000))

"""	# Función para verificar si un número cumple la conjetura de Sheldon"""

def cumple_conjetura_sheldon(num):
	    if not es_primo(num):
	        return False

"""	    # Obtener posición del número en la lista de primos (1-indexado)"""

def cumple_conjetura_sheldon(num):
    if not es_primo(num):
        return False

    global primos
    posicion = primos.index(num) + 1

"""	    # Propiedad b: El producto de sus dígitos debe igualar su posición en la lista de primos"""

!pip install sympy
import sympy as sp # Import the sympy library and alias it as 'sp'

primos = list(sp.primerange(1, 1000000))

def es_primo(n): # Define the es_primo function

    return sp.isprime(n)

def producto_digitos(n):
    """Calcula el producto de los dígitos de un número."""
    producto = 1
    for digito in str(n):
        producto *= int(digito)
    return producto

def numero_espejo(n):
    """Devuelve el número espejo de un número."""
    return int(str(n)[::-1])

def cumple_conjetura_sheldon(num):
    if not es_primo(num):
        return False

    global primos
    posicion = primos.index(num) + 1

    if producto_digitos(num) != posicion:
        return False

    espejo_num = numero_espejo(num)
    if not es_primo(espejo_num):
        return False

    posicion_espejo = primos.index(espejo_num) + 1
    espejo_posicion = numero_espejo(posicion)

    return primos[espejo_posicion - 1] == num

sheldon_nums = [num for num in primos if cumple_conjetura_sheldon(num)]

print("Números que cumplen la conjetura de Sheldon:", sheldon_nums)